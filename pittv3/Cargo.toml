[package]
name = "pittv3"
version = "0.1.1"
description = """
PKI Interoperability Test Tool v3 (PITTv3) can be used to build and validate certification paths using different sets
of trust anchors, intermediate CA certificates and end entity certificates.
"""
authors = [""]
license = "Apache-2.0 OR MIT"
repository = "https://github.com/carl-wallace/rust-pki"
categories = ["cryptography", "pki", "no-std"]
keywords = ["crypto", "x.509", "OCSP"]
readme = "README.md"
edition = "2021"
rust-version = "1.57"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
x509-cert = { git = "https://github.com/carl-wallace/formats", branch = "pqc", features = ["pem"] }
const-oid = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
pkcs7 = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
der = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
x509-ocsp = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
base64ct = { git = "https://github.com/carl-wallace/formats", branch = "pqc", features = ["alloc"], optional=true }
spki = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
pqckeys = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }
pem-rfc7468 = { git = "https://github.com/carl-wallace/formats", branch = "pqc" }

certval = { path = "../certval", default-features = false}
sha-1 = {version = "0.10.1", default-features = false}
sha2 = {version = "0.10.7", default-features = false}

async-recursion = "1.0.0"
bytes = "1.1.0"
cfg-if = "1.0.0"
ciborium = "0.2.0"
clap = {version = "3.0.7", default-features = false, features=["std", "derive"]}
error-chain = "0.12.2"
flagset = { version = "0.4.3" }
lazy_static = "1.4.*"
serde = { version = "1.0.133", default-features = false, features = ["derive"] }
serde_json = "1.0.74"

csv = {version = "1.1.6", optional = true}
log = {version = "0.4.8", optional = true}
log4rs = {version = "1.2.0", optional = true}
futures = {version = "0.3.19", optional = true}

ndarray = {version = "0.15.4", optional = true}
reqwest = { version = "0.11.10", features = ["blocking"], optional = true}
tokio = { version = "1.19.2", features = ["full", "time", "rt-multi-thread"], optional = true }
tokio-test = {version = "0.4.2", optional = true}
walkdir = { version = "2", optional = true}

pqcrypto-internals =  {version = "0.2.4", optional = true}
pqcrypto-dilithium =  {version = "0.4.6", optional = true}
pqcrypto-falcon = {version = "0.2.10", optional = true}
pqcrypto-sphincsplus = {version = "0.6.4", optional = true}
pqcrypto = {version = "0.16.1", optional = true}
pqcrypto-traits = {version = "0.3.4", optional = true}

# Similar to certval, there are six feature gates (one more than certval):
#   - no-default-features (i.e., no-std) provides full path validation without file system support, network or thread safety (and no revocation support)
#   - revocation adds support for verifying CRLs and OCSP responses presented to library (presumably obtained via stapling at higher protocol level)
#   - std adds file-based utilities (including graph building) and support for multi-threading (no revocation support)
#   - revocation,std adds revocation support alongside file-based utilities and support for multi-threading
#   - remote adds support for dynamic path building, CRL fetching and OCSP
#   - std-app provides the Pittv3 app with std support while building certval with no-default-features
# Default is set to be the most all encompassing (i.e., remote).
[features]
default = ["remote"]
revocation = ["certval/revocation"]
std_app = ["certval/revocation", "ndarray", "tokio", "tokio-test", "base64ct", "walkdir", "log", "log4rs", "futures", "csv"]
std = ["std_app", "certval/std", "revocation"]
remote = ["certval/remote", "revocation", "std"]
pqc = ["pqcrypto-internals", "pqcrypto-dilithium", "pqcrypto-falcon", "pqcrypto-sphincsplus", "pqcrypto", "pqcrypto-traits"]

[dev-dependencies]
assert_cmd = "2.0.4"
predicates = "2.1"
hex-literal = "0.3.4"
tempfile = "3.3.0"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]